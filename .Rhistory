import
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_appdata.xlsx")
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_appdata.xlsx")
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_extract.xlsx")
install.packages("sqldf")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
install.packages("curl")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
?fromJSON
GET("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
?GET
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
article_key <- "&api-key=c2fede7bd9aea57c898f538e5ec0a1ee:6:68700045"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
articles <- req$response$docs
colnames(articles)
?open.connection
?curl
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
head(fromJSON)
?fromJSON
download.file("http://pdf.keysnews.com/frontpage.pdf",destfile="./test.pdf", method="curl")
download.file("http://pdf.keysnews.com/frontpage.pdf",destfile="./test.pdf")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",method="curl")
?ping
??ping
download.file("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",destfile="./test.json")
dir()
testJSON <- fromJSON("test.json")
View(testJSON)
?download.file
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",method="wget")
read.table("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
readLines(""http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2"")
readLines("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
testJSON <- readLines("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
View(testJSON)
readJSON(testJSON)
?scan
scan(file="http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
install.packages("circlize")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
insta..packages("circlize")
install.packages("circlize")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
ping()
?ping
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
lesDist <- rbind_all(mget(lesDist))
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
lesDist <- rbind_all(lesDist)
View(lesDist)
head(lesDist)
lesDist <- rbind_list(lesDist)
# http://editerna.free.fr/wp/?p=199
# load(url("http://editerna.free.fr/R/Blog/Cartes/countries_distances.RData"))
library(maps)
library(geosphere)
library(dplyr)
world.map <- map("world", fill = TRUE)
indicePays <- seq(1,length(world.map$names))[-grep(":", world.map$names)]
# https://stat.ethz.ch/pipermail/r-help/2010-April/237031.html
splitNA <- function(x){
idx <- 1 + cumsum(is.na(x))
not.na <- !is.na(x)
split(x[not.na], idx[not.na])
}
# Coordinates of every country
lesCoordsX <- splitNA(world.map$x)
lesCoordsY <- splitNA(world.map$y)
lesDistancesUnPays <- function(unIndicePays){
# Borders coordinates for current country
coordsPays <- data.frame(long = lesCoordsX[[unIndicePays]], lat = lesCoordsY[[unIndicePays]])
# Indexes of countries except the current one
# and the one for which the computation has already been done
lesIndicesAutresPays <- indicePays[indicePays > unIndicePays]
distancePoint <- function(unPoint){
unPoint.m <- matrix(unPoint, ncol = 2)
# We need to compute distances between unPoint and every border points of every other countries
# it is given by lesIndicesAutresPays
distancePointPays <- function(unIndicePays2){
coordsPays2 <- matrix(cbind(long = lesCoordsX[[unIndicePays2]], lat = lesCoordsY[[unIndicePays2]]), ncol = 2)
lesDistPointPays2 <- spDists(x=coordsPays2, y=matrix(unPoint, ncol=2), longlat=TRUE)
return(min(lesDistPointPays2)) # shortest distance between unPoint and country which index is unIndicePays2
}
lesDistPointPays2 <- lapply(lesIndicesAutresPays, distancePointPays)
res <- unlist(lesDistPointPays2)
return(res)
}
distancesPays <- apply(coordsPays, 1, distancePoint)
# Shortest distances between unPoint and every other country
if(!is.matrix(distancesPays)){
# For the last country on the list
plusCourtesDistances <- min(distancesPays)
}else{
plusCourtesDistances <- apply(distancesPays, 1, min)
}
resul <- cbind(pays1 = rep(unIndicePays, length(plusCourtesDistances)),pays2 = lesIndicesAutresPays, dist = plusCourtesDistances)
return(resul)
}
# We don't need distances for the last country (they have all been computed)
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
lesDist <- rbind_list(lesDist)
# We need to recover distances for each couple
lesDist$ID <- paste(sprintf("%04d", lesDist$pays1), sprintf("%04d", lesDist$pays2), sep = "")
lesDist2 <- data.frame(cbind(pays1 = rep(indicePays, each = length(indicePays)),
pays2 = rep(indicePays, length(indicePays))))
lesDist2  <-  lesDist2[-which(lesDist2$pays1 == lesDist2$pays2),]
lesDist2$ID <- paste(sprintf("%04d", lesDist2$pays1), sprintf("%04d", lesDist2$pays2), sep = "")
lesDist2$ID2 <- paste(sprintf("%04d", lesDist2$pays2), sprintf("%04d", lesDist2$pays1), sep = "")
lesDist2$match <- match(lesDist2$ID, lesDist$ID)
lesDist2[is.na(lesDist2$match),"match"] <- match(lesDist2$ID2[is.na(lesDist2$match)], lesDist$ID)
lesDist2$dist <- lesDist[lesDist2$match, "dist"]
lesDist2 <- lesDist2[,c("pays1", "pays2", "dist")]
lesDist <- lesDist2
rm(lesDist2)
# Let's add countries names
lesDist$pays1 <- world.map$names[lesDist$pays1]
lesDist$pays2 <- world.map$names[lesDist$pays2]
source('~/.active-rstudio-document', echo=TRUE)
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
install.packages("rJava")
install.packages("randomForest")
install.packages("randomForest")
install.packages("quantmod")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
lesDist[lesDist$dist == 0,]
distances <- lesDist
bordercountries <- lesDist[lesDist$dist == 0,]
View(bordercountries)
View(bordercountries)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
View(lesDist)
View(bordercountries)
load(url("http://editerna.free.fr/R/Blog/Cartes/countries_distances.RData"))
View(lesDist)
?
load
?url
install.packages("countrycode")
?countrycode
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
install.packages("cshapes")
source('~/.active-rstudio-document', echo=TRUE)
?plotly
source('~/R/test/plotlyapi.R', echo=TRUE)
?py
py
?plotly
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("KernSmooth")
library(KernSmooth)
setwd("~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2")
req <- GET("https://api.github.com/rate_limit", gtoken)
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
?config
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
?oauth_endpoints
?oauth_app
install.packages("httpuv)")
install.packages("httpuv")
install.packages(c("BH", "crayon", "curl", "devtools", "evaluate", "formatR", "gdata", "gtools", "highr", "jsonlite", "knitr", "manipulate", "maptools", "markdown", "plyr", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "sp", "stringr"))
install.packages(c("BH", "codetools", "curl", "devtools", "evaluate", "formatR", "gdata", "gtools", "highr", "jsonlite", "knitr", "lattice", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "plyr", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "sp", "stringr"), lib="C:/Program Files/R/R-3.1.3/library")
install.packages(c("BH", "crayon", "curl", "devtools", "evaluate",
))
install.packages(c("BH", "crayon", "curl", "devtools", "evaluate", "formatR", "gdata", "gtools", "highr", "jsonlite", "knitr", "manipulate", "maptools", "markdown", "plyr", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "sp", "stringr"))
install.packages(c("BH", "codetools", "curl", "devtools", "evaluate", "formatR", "gdata", "gtools", "highr", "jsonlite", "knitr", "lattice", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "plyr", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "sp", "stringr"), lib="C:/Program Files/R/R-3.1.3/library")
install.packages(c("BH", "crayon", "curl", "devtools", "evaluate",
install.packages(c("BH", "codetools", "curl", "devtools", "evaluate",
)
))
))))
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2.R')
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
data <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(data)
content(data)
str(data)
json1 <- fromJSON(toJSON(content(req)))
names(json1)
json1
json1[json1$name == "datasharing",]$created_at
names(jason1)
names(json1)
head(json1)
json1
str(json1)
data <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(data)
content(data)
json1 <- fromJSON(toJSON(content(data)))
str(json1)
json1[json1$name == "datasharing",]$created_at
?file
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2q2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2q2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2q2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2q2.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2q2.R')
source('~/.active-rstudio-document')
head(acs)
acs <- read.csv("getdata-data-ss06pid.csv")
head(cs)
head(acs)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
unique(acs$AGEP)
sqldf("select AGEP where unique from acs")
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlcode <- readlines(connection)
close(connection)
# libraries
library(httr)
# get data
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlcode <- readlines(connection)
close(connection)
# libraries
library(httr)
# get data
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlcode <- readLines(connection)
close(connection)
str(htmlcode)
# libraries
library(httr)
# get data
htmlcode <- GET("http://biostat.jhsph.edu/~jleek/contact.html ")
content <- content(htmlcode, as="text")
htmlcode <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content <- content(htmlcode, as="text")
htmlcode <- readLines(connection)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlcode <- readLines(connection)
parsedHTML <- htmlParse(htmlcode, asText=TRUE)
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz2/quiz2q4.R')
conn = 'http://biostat.jhsph.edu/~jleek/contact.html'
htmlCode = readLines(conn)
l <- c(10,20,30,100)
nchar(htmlCode[l])
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "q5.for")
?read.fwf
read.fwf("q5.for")
read.table(q5.foir)
read.table("q5.for")
data <- read.fwf("q5.for",widths = c(15, 4, 9, 4, 9, 4, 9, 4, 4), skip = 4, header = FALSE)
head(data)
sum(data[,4])
